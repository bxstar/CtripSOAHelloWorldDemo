//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleHelloWorldClient
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Collections.Generic;
    using CServiceStack.ProtoBuf;
    using System.Threading;
    using System.Threading.Tasks;
    using CServiceStack.ServiceHost;
    using CServiceStack.ServiceClient;
    using CServiceStack.Common.Types;
    
    
    /// <summary>
    /// Sample helloworld request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1009")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soa.ctrip.com/framework/soa/sample/v1")]
    [System.Xml.Serialization.XmlRootAttribute("HelloRequest", Namespace="http://soa.ctrip.com/framework/soa/sample/v1", IsNullable=false)]
    [ProtoContract()]
    public partial class HelloRequestType
    {
        
        private string nameField;
        
        /// <summary>
        /// If provided, service will response with Hello 'Name'.
        /// </summary>
        [ProtoMember(1)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }
    
    /// <summary>
    /// Sample helloworld response
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1009")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soa.ctrip.com/framework/soa/sample/v1")]
    [System.Xml.Serialization.XmlRootAttribute("HelloResponse", Namespace="http://soa.ctrip.com/framework/soa/sample/v1", IsNullable=false)]
    [ProtoContract()]
    public partial class HelloResponseType : IHasResponseStatus
    {
        
        private ResponseStatusType responseStatusField;
        
        private string resultField;
        
        [ProtoMember(1)]
        public ResponseStatusType ResponseStatus
        {
            get
            {
                return this.responseStatusField;
            }
            set
            {
                this.responseStatusField = value;
            }
        }
        
        /// <summary>
        /// HelloWorld response result
        /// </summary>
        [ProtoMember(2)]
        public string Result
        {
            get
            {
                return this.resultField;
            }
            set
            {
                this.resultField = value;
            }
        }
    }
    
    /// <summary>
    /// Service client auto-generated by SOA tool, DO NOT CHANGE!
    /// 
    /// A hello world like sample demonstrating the usage of CServiceStack
    /// </summary>
    public class HelloWorldServiceClient : ServiceClientBase<HelloWorldServiceClient>
    {
        
        public const string OriginalServiceName = "HelloWorldService";
        
        public const string OriginalServiceNamespace = "http://soa.ctrip.com/framework/soa/sample/v1";
        
        private HelloWorldServiceClient(string baseUri) : 
                base(baseUri)
        {
        }
        
        private HelloWorldServiceClient(string serviceName, string serviceNamespace, string subEnv) : 
                base(serviceName, serviceNamespace, subEnv)
        {
        }
        
        public virtual HelloResponseType Hello(HelloRequestType helloIn)
        {
            return base.Invoke<HelloResponseType>("Hello", helloIn);
        }
        
        public virtual Task<HelloResponseType> CreateAsyncTaskOfHello(HelloRequestType helloIn, CancellationToken? cancellationToken = null, TaskCreationOptions? taskCreationOptions = null)
        {
            return base.CreateAsyncTask<HelloRequestType, HelloResponseType>("Hello", helloIn, cancellationToken, taskCreationOptions);
        }
        
        public virtual CheckHealthResponseType CheckHealth(CheckHealthRequestType checkHealthIn)
        {
            return base.Invoke<CheckHealthResponseType>("CheckHealth", checkHealthIn);
        }
        
        public virtual Task<CheckHealthResponseType> CreateAsyncTaskOfCheckHealth(CheckHealthRequestType checkHealthIn, CancellationToken? cancellationToken = null, TaskCreationOptions? taskCreationOptions = null)
        {
            return base.CreateAsyncTask<CheckHealthRequestType, CheckHealthResponseType>("CheckHealth", checkHealthIn, cancellationToken, taskCreationOptions);
        }
    }
}
